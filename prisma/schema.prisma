generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  email         String          @unique
  password      String
  username      String          @unique
  phone         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          Role            @default(PATIENT)
  accounts      Account[]
  sessions      Session[]
  authenticator Authenticator[]

  // Profile relations (only one will be populated based on role)
  patient  Patient?
  pharmacy Pharmacy?
}

enum Role {
  PATIENT
  PHARMACY
  ADMIN
}

// Authentication models (unchanged from your current schema)
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Profile models
model Patient {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  userId            String         @unique @db.ObjectId
  user              User           @relation(fields: [userId], references: [id])
  fullName          String
  dateOfBirth       DateTime
  gender            String?
  streetAddress     String
  city              String
  stateProvince     String
  postalCode        String
  country           String
  medicalConditions String?
  allergies         String?
  geoLocation       GeoLocation?   @relation(fields: [geoLocationId], references: [id])
  geoLocationId     String?        @db.ObjectId
  subscriptions     Subscription[]
  prescriptions     Prescription[]
  orders            Order[]
}

model Pharmacy {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  userId        String       @unique @db.ObjectId
  user          User         @relation(fields: [userId], references: [id])
  name          String
  phone         String
  streetAddress String
  city          String
  stateProvince String
  postalCode    String
  country       String
  geoLocation   GeoLocation? @relation(fields: [geoLocationId], references: [id])
  geoLocationId String?      @db.ObjectId
  medicines     Medicine[]
  orders        Order[]
  licenseNumber String       @unique
  licenseFile   String?
  verified      Boolean      @default(false)
}

model Prescription {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  PharmacistId String   @db.ObjectId
  Patient      Patient  @relation(fields: [PharmacistId], references: [id])
  fileUrl      String // URL to the uploaded prescription image/file
  createdAt    DateTime @default(now())
}

model Medicine {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  pharmacyId    String          @db.ObjectId
  pharmacy      Pharmacy        @relation(fields: [pharmacyId], references: [id])
  name          String
  price         Float
  stock         Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  OrderMedicine OrderMedicine[]
  Subscription  Subscription[]
}

model Order {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  PharmacistId String          @db.ObjectId
  Patient      Patient         @relation(fields: [PharmacistId], references: [id])
  pharmacyId   String          @db.ObjectId
  pharmacy     Pharmacy        @relation(fields: [pharmacyId], references: [id])
  medicines    OrderMedicine[]
  totalAmount  Float
  payment      Payment?
  delivery     Delivery?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model OrderMedicine {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @db.ObjectId
  order      Order    @relation(fields: [orderId], references: [id])
  medicineId String   @db.ObjectId
  medicine   Medicine @relation(fields: [medicineId], references: [id])
  quantity   Int
}

model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @unique @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  amount    Float
  createdAt DateTime @default(now())
}

model Subscription {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  PharmacistId String   @db.ObjectId
  Patient      Patient  @relation(fields: [PharmacistId], references: [id])
  medicineId   String   @db.ObjectId
  medicine     Medicine @relation(fields: [medicineId], references: [id])
  frequency    Int // Days between each delivery
  nextDelivery DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Delivery {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @unique @db.ObjectId
  order      Order    @relation(fields: [orderId], references: [id])
  provider   String
  trackingId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model GeoLocation {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  latitude  Float
  longitude Float
  Patient   Patient[]
  Pharmacy  Pharmacy[]
}
