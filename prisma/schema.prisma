generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Patient {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String         @unique
  password      String
  phone         String?
  address       String?
  prescriptions Prescription[]
  orders        Order[]
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  geoLocationId String?        @db.ObjectId

  GeoLocation GeoLocation? @relation(fields: [geoLocationId], references: [id])
}

model Pharmacy {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  PharmacistId  String      @unique @db.ObjectId
  name          String
  location      GeoLocation @relation(fields: [geoLocationId], references: [id])
  medicines     Medicine[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  geoLocationId String      @db.ObjectId
  Order         Order[]
}

model Prescription {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  PharmacistId String   @db.ObjectId
  Patient      Patient  @relation(fields: [PharmacistId], references: [id])
  fileUrl      String // URL to the uploaded prescription image/file
  createdAt    DateTime @default(now())
}

model Medicine {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  pharmacyId    String          @db.ObjectId
  pharmacy      Pharmacy        @relation(fields: [pharmacyId], references: [id])
  name          String
  price         Float
  stock         Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  OrderMedicine OrderMedicine[]
  Subscription  Subscription[]
}

model Order {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  PharmacistId String          @db.ObjectId
  Patient      Patient         @relation(fields: [PharmacistId], references: [id])
  pharmacyId   String          @db.ObjectId
  pharmacy     Pharmacy        @relation(fields: [pharmacyId], references: [id])
  medicines    OrderMedicine[]
  totalAmount  Float
  payment      Payment?
  delivery     Delivery?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model OrderMedicine {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @db.ObjectId
  order      Order    @relation(fields: [orderId], references: [id])
  medicineId String   @db.ObjectId
  medicine   Medicine @relation(fields: [medicineId], references: [id])
  quantity   Int
}

model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @unique @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  amount    Float
  createdAt DateTime @default(now())
}

model Subscription {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  PharmacistId String   @db.ObjectId
  Patient      Patient  @relation(fields: [PharmacistId], references: [id])
  medicineId   String   @db.ObjectId
  medicine     Medicine @relation(fields: [medicineId], references: [id])
  frequency    Int // Days between each delivery
  nextDelivery DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Delivery {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @unique @db.ObjectId
  order      Order    @relation(fields: [orderId], references: [id])
  provider   String
  trackingId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model GeoLocation {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  latitude  Float
  longitude Float
  Patient   Patient[]
  Pharmacy  Pharmacy[]
}
